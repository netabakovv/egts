// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: storage_record.proto
// Protobuf Java Version: 4.30.2

package org.example.libs;

/**
 * <pre>
 * CAN-лог
 * </pre>
 *
 * Protobuf type {@code SensCanLogData}
 */
public final class SensCanLogData extends
    com.google.protobuf.GeneratedMessage implements
    // @@protoc_insertion_point(message_implements:SensCanLogData)
    SensCanLogDataOrBuilder {
private static final long serialVersionUID = 0L;
  static {
    com.google.protobuf.RuntimeVersion.validateProtobufGencodeVersion(
      com.google.protobuf.RuntimeVersion.RuntimeDomain.PUBLIC,
      /* major= */ 4,
      /* minor= */ 30,
      /* patch= */ 2,
      /* suffix= */ "",
      SensCanLogData.class.getName());
  }
  // Use SensCanLogData.newBuilder() to construct.
  private SensCanLogData(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
    super(builder);
  }
  private SensCanLogData() {
  }

  public static final com.google.protobuf.Descriptors.Descriptor
      getDescriptor() {
    return org.example.libs.StorageRecordOuterClass.internal_static_SensCanLogData_descriptor;
  }

  @java.lang.Override
  protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internalGetFieldAccessorTable() {
    return org.example.libs.StorageRecordOuterClass.internal_static_SensCanLogData_fieldAccessorTable
        .ensureFieldAccessorsInitialized(
            org.example.libs.SensCanLogData.class, org.example.libs.SensCanLogData.Builder.class);
  }

  public static final int SENS_NUM_FIELD_NUMBER = 1;
  private int sensNum_ = 0;
  /**
   * <pre>
   * Номер датчика
   * </pre>
   *
   * <code>uint32 sens_num = 1;</code>
   * @return The sensNum.
   */
  @java.lang.Override
  public int getSensNum() {
    return sensNum_;
  }

  public static final int FLAG_SECURITY_STATE_FIELD_NUMBER = 2;
  private int flagSecurityState_ = 0;
  /**
   * <pre>
   * Флаги работоспособности и безопасности устройства
   * </pre>
   *
   * <code>uint32 flag_security_state = 2;</code>
   * @return The flagSecurityState.
   */
  @java.lang.Override
  public int getFlagSecurityState() {
    return flagSecurityState_;
  }

  public static final int FLAG_ALARM_FIELD_NUMBER = 3;
  private int flagAlarm_ = 0;
  /**
   * <pre>
   * Флаги контроллеров аварии
   * </pre>
   *
   * <code>uint32 flag_alarm = 3;</code>
   * @return The flagAlarm.
   */
  @java.lang.Override
  public int getFlagAlarm() {
    return flagAlarm_;
  }

  public static final int ENGINE_TIME_ALL_FIELD_NUMBER = 4;
  private int engineTimeAll_ = 0;
  /**
   * <pre>
   * Полное время работы двигателя, ч*100. Пример: 1ч 15мин = 125.
   * </pre>
   *
   * <code>uint32 engine_time_all = 4;</code>
   * @return The engineTimeAll.
   */
  @java.lang.Override
  public int getEngineTimeAll() {
    return engineTimeAll_;
  }

  public static final int ENGINE_TURN_SPEED_FIELD_NUMBER = 5;
  private int engineTurnSpeed_ = 0;
  /**
   * <pre>
   * Обороты двигателя
   * </pre>
   *
   * <code>uint32 engine_turn_speed = 5;</code>
   * @return The engineTurnSpeed.
   */
  @java.lang.Override
  public int getEngineTurnSpeed() {
    return engineTurnSpeed_;
  }

  public static final int ENGINE_TEMPERATURE_FIELD_NUMBER = 6;
  private int engineTemperature_ = 0;
  /**
   * <pre>
   * Температура двигателя, Ц.
   * </pre>
   *
   * <code>sint32 engine_temperature = 6;</code>
   * @return The engineTemperature.
   */
  @java.lang.Override
  public int getEngineTemperature() {
    return engineTemperature_;
  }

  public static final int FUEL_CONSUMPTION_ALL_FIELD_NUMBER = 7;
  private int fuelConsumptionAll_ = 0;
  /**
   * <pre>
   * Полный расход топлива, л.
   * </pre>
   *
   * <code>uint32 fuel_consumption_all = 7;</code>
   * @return The fuelConsumptionAll.
   */
  @java.lang.Override
  public int getFuelConsumptionAll() {
    return fuelConsumptionAll_;
  }

  public static final int FUEL_LEVEL_FIELD_NUMBER = 8;
  private int fuelLevel_ = 0;
  /**
   * <pre>
   * bit0..bit14 - Уровень топлива. bit15- Единицы измерения. 1 - %, 0 - л.
   * </pre>
   *
   * <code>uint32 fuel_level = 8;</code>
   * @return The fuelLevel.
   */
  @java.lang.Override
  public int getFuelLevel() {
    return fuelLevel_;
  }

  public static final int TRACK_ALL_FIELD_NUMBER = 9;
  private int trackAll_ = 0;
  /**
   * <pre>
   * Полный пробег транспортного средства, км*100
   * </pre>
   *
   * <code>uint32 track_all = 9;</code>
   * @return The trackAll.
   */
  @java.lang.Override
  public int getTrackAll() {
    return trackAll_;
  }

  public static final int SPEED_FIELD_NUMBER = 10;
  private int speed_ = 0;
  /**
   * <pre>
   * Скорость, км/ч.
   * </pre>
   *
   * <code>uint32 speed = 10;</code>
   * @return The speed.
   */
  @java.lang.Override
  public int getSpeed() {
    return speed_;
  }

  public static final int PRESSURE_AXIS_1_FIELD_NUMBER = 11;
  private int pressureAxis1_ = 0;
  /**
   * <pre>
   * Давление на ось 1, кг*10
   * </pre>
   *
   * <code>uint32 pressure_axis_1 = 11;</code>
   * @return The pressureAxis1.
   */
  @java.lang.Override
  public int getPressureAxis1() {
    return pressureAxis1_;
  }

  public static final int PRESSURE_AXIS_2_FIELD_NUMBER = 12;
  private int pressureAxis2_ = 0;
  /**
   * <pre>
   * Давление на ось 2
   * </pre>
   *
   * <code>uint32 pressure_axis_2 = 12;</code>
   * @return The pressureAxis2.
   */
  @java.lang.Override
  public int getPressureAxis2() {
    return pressureAxis2_;
  }

  public static final int PRESSURE_AXIS_3_FIELD_NUMBER = 13;
  private int pressureAxis3_ = 0;
  /**
   * <pre>
   * Давление на ось 3
   * </pre>
   *
   * <code>uint32 pressure_axis_3 = 13;</code>
   * @return The pressureAxis3.
   */
  @java.lang.Override
  public int getPressureAxis3() {
    return pressureAxis3_;
  }

  public static final int PRESSURE_AXIS_4_FIELD_NUMBER = 14;
  private int pressureAxis4_ = 0;
  /**
   * <pre>
   * Давление на ось 4
   * </pre>
   *
   * <code>uint32 pressure_axis_4 = 14;</code>
   * @return The pressureAxis4.
   */
  @java.lang.Override
  public int getPressureAxis4() {
    return pressureAxis4_;
  }

  public static final int PRESSURE_AXIS_5_FIELD_NUMBER = 15;
  private int pressureAxis5_ = 0;
  /**
   * <pre>
   * Давление на ось 5
   * </pre>
   *
   * <code>uint32 pressure_axis_5 = 15;</code>
   * @return The pressureAxis5.
   */
  @java.lang.Override
  public int getPressureAxis5() {
    return pressureAxis5_;
  }

  private byte memoizedIsInitialized = -1;
  @java.lang.Override
  public final boolean isInitialized() {
    byte isInitialized = memoizedIsInitialized;
    if (isInitialized == 1) return true;
    if (isInitialized == 0) return false;

    memoizedIsInitialized = 1;
    return true;
  }

  @java.lang.Override
  public void writeTo(com.google.protobuf.CodedOutputStream output)
                      throws java.io.IOException {
    if (sensNum_ != 0) {
      output.writeUInt32(1, sensNum_);
    }
    if (flagSecurityState_ != 0) {
      output.writeUInt32(2, flagSecurityState_);
    }
    if (flagAlarm_ != 0) {
      output.writeUInt32(3, flagAlarm_);
    }
    if (engineTimeAll_ != 0) {
      output.writeUInt32(4, engineTimeAll_);
    }
    if (engineTurnSpeed_ != 0) {
      output.writeUInt32(5, engineTurnSpeed_);
    }
    if (engineTemperature_ != 0) {
      output.writeSInt32(6, engineTemperature_);
    }
    if (fuelConsumptionAll_ != 0) {
      output.writeUInt32(7, fuelConsumptionAll_);
    }
    if (fuelLevel_ != 0) {
      output.writeUInt32(8, fuelLevel_);
    }
    if (trackAll_ != 0) {
      output.writeUInt32(9, trackAll_);
    }
    if (speed_ != 0) {
      output.writeUInt32(10, speed_);
    }
    if (pressureAxis1_ != 0) {
      output.writeUInt32(11, pressureAxis1_);
    }
    if (pressureAxis2_ != 0) {
      output.writeUInt32(12, pressureAxis2_);
    }
    if (pressureAxis3_ != 0) {
      output.writeUInt32(13, pressureAxis3_);
    }
    if (pressureAxis4_ != 0) {
      output.writeUInt32(14, pressureAxis4_);
    }
    if (pressureAxis5_ != 0) {
      output.writeUInt32(15, pressureAxis5_);
    }
    getUnknownFields().writeTo(output);
  }

  @java.lang.Override
  public int getSerializedSize() {
    int size = memoizedSize;
    if (size != -1) return size;

    size = 0;
    if (sensNum_ != 0) {
      size += com.google.protobuf.CodedOutputStream
        .computeUInt32Size(1, sensNum_);
    }
    if (flagSecurityState_ != 0) {
      size += com.google.protobuf.CodedOutputStream
        .computeUInt32Size(2, flagSecurityState_);
    }
    if (flagAlarm_ != 0) {
      size += com.google.protobuf.CodedOutputStream
        .computeUInt32Size(3, flagAlarm_);
    }
    if (engineTimeAll_ != 0) {
      size += com.google.protobuf.CodedOutputStream
        .computeUInt32Size(4, engineTimeAll_);
    }
    if (engineTurnSpeed_ != 0) {
      size += com.google.protobuf.CodedOutputStream
        .computeUInt32Size(5, engineTurnSpeed_);
    }
    if (engineTemperature_ != 0) {
      size += com.google.protobuf.CodedOutputStream
        .computeSInt32Size(6, engineTemperature_);
    }
    if (fuelConsumptionAll_ != 0) {
      size += com.google.protobuf.CodedOutputStream
        .computeUInt32Size(7, fuelConsumptionAll_);
    }
    if (fuelLevel_ != 0) {
      size += com.google.protobuf.CodedOutputStream
        .computeUInt32Size(8, fuelLevel_);
    }
    if (trackAll_ != 0) {
      size += com.google.protobuf.CodedOutputStream
        .computeUInt32Size(9, trackAll_);
    }
    if (speed_ != 0) {
      size += com.google.protobuf.CodedOutputStream
        .computeUInt32Size(10, speed_);
    }
    if (pressureAxis1_ != 0) {
      size += com.google.protobuf.CodedOutputStream
        .computeUInt32Size(11, pressureAxis1_);
    }
    if (pressureAxis2_ != 0) {
      size += com.google.protobuf.CodedOutputStream
        .computeUInt32Size(12, pressureAxis2_);
    }
    if (pressureAxis3_ != 0) {
      size += com.google.protobuf.CodedOutputStream
        .computeUInt32Size(13, pressureAxis3_);
    }
    if (pressureAxis4_ != 0) {
      size += com.google.protobuf.CodedOutputStream
        .computeUInt32Size(14, pressureAxis4_);
    }
    if (pressureAxis5_ != 0) {
      size += com.google.protobuf.CodedOutputStream
        .computeUInt32Size(15, pressureAxis5_);
    }
    size += getUnknownFields().getSerializedSize();
    memoizedSize = size;
    return size;
  }

  @java.lang.Override
  public boolean equals(final java.lang.Object obj) {
    if (obj == this) {
     return true;
    }
    if (!(obj instanceof org.example.libs.SensCanLogData)) {
      return super.equals(obj);
    }
    org.example.libs.SensCanLogData other = (org.example.libs.SensCanLogData) obj;

    if (getSensNum()
        != other.getSensNum()) return false;
    if (getFlagSecurityState()
        != other.getFlagSecurityState()) return false;
    if (getFlagAlarm()
        != other.getFlagAlarm()) return false;
    if (getEngineTimeAll()
        != other.getEngineTimeAll()) return false;
    if (getEngineTurnSpeed()
        != other.getEngineTurnSpeed()) return false;
    if (getEngineTemperature()
        != other.getEngineTemperature()) return false;
    if (getFuelConsumptionAll()
        != other.getFuelConsumptionAll()) return false;
    if (getFuelLevel()
        != other.getFuelLevel()) return false;
    if (getTrackAll()
        != other.getTrackAll()) return false;
    if (getSpeed()
        != other.getSpeed()) return false;
    if (getPressureAxis1()
        != other.getPressureAxis1()) return false;
    if (getPressureAxis2()
        != other.getPressureAxis2()) return false;
    if (getPressureAxis3()
        != other.getPressureAxis3()) return false;
    if (getPressureAxis4()
        != other.getPressureAxis4()) return false;
    if (getPressureAxis5()
        != other.getPressureAxis5()) return false;
    if (!getUnknownFields().equals(other.getUnknownFields())) return false;
    return true;
  }

  @java.lang.Override
  public int hashCode() {
    if (memoizedHashCode != 0) {
      return memoizedHashCode;
    }
    int hash = 41;
    hash = (19 * hash) + getDescriptor().hashCode();
    hash = (37 * hash) + SENS_NUM_FIELD_NUMBER;
    hash = (53 * hash) + getSensNum();
    hash = (37 * hash) + FLAG_SECURITY_STATE_FIELD_NUMBER;
    hash = (53 * hash) + getFlagSecurityState();
    hash = (37 * hash) + FLAG_ALARM_FIELD_NUMBER;
    hash = (53 * hash) + getFlagAlarm();
    hash = (37 * hash) + ENGINE_TIME_ALL_FIELD_NUMBER;
    hash = (53 * hash) + getEngineTimeAll();
    hash = (37 * hash) + ENGINE_TURN_SPEED_FIELD_NUMBER;
    hash = (53 * hash) + getEngineTurnSpeed();
    hash = (37 * hash) + ENGINE_TEMPERATURE_FIELD_NUMBER;
    hash = (53 * hash) + getEngineTemperature();
    hash = (37 * hash) + FUEL_CONSUMPTION_ALL_FIELD_NUMBER;
    hash = (53 * hash) + getFuelConsumptionAll();
    hash = (37 * hash) + FUEL_LEVEL_FIELD_NUMBER;
    hash = (53 * hash) + getFuelLevel();
    hash = (37 * hash) + TRACK_ALL_FIELD_NUMBER;
    hash = (53 * hash) + getTrackAll();
    hash = (37 * hash) + SPEED_FIELD_NUMBER;
    hash = (53 * hash) + getSpeed();
    hash = (37 * hash) + PRESSURE_AXIS_1_FIELD_NUMBER;
    hash = (53 * hash) + getPressureAxis1();
    hash = (37 * hash) + PRESSURE_AXIS_2_FIELD_NUMBER;
    hash = (53 * hash) + getPressureAxis2();
    hash = (37 * hash) + PRESSURE_AXIS_3_FIELD_NUMBER;
    hash = (53 * hash) + getPressureAxis3();
    hash = (37 * hash) + PRESSURE_AXIS_4_FIELD_NUMBER;
    hash = (53 * hash) + getPressureAxis4();
    hash = (37 * hash) + PRESSURE_AXIS_5_FIELD_NUMBER;
    hash = (53 * hash) + getPressureAxis5();
    hash = (29 * hash) + getUnknownFields().hashCode();
    memoizedHashCode = hash;
    return hash;
  }

  public static org.example.libs.SensCanLogData parseFrom(
      java.nio.ByteBuffer data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static org.example.libs.SensCanLogData parseFrom(
      java.nio.ByteBuffer data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static org.example.libs.SensCanLogData parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static org.example.libs.SensCanLogData parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static org.example.libs.SensCanLogData parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static org.example.libs.SensCanLogData parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static org.example.libs.SensCanLogData parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessage
        .parseWithIOException(PARSER, input);
  }
  public static org.example.libs.SensCanLogData parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessage
        .parseWithIOException(PARSER, input, extensionRegistry);
  }

  public static org.example.libs.SensCanLogData parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessage
        .parseDelimitedWithIOException(PARSER, input);
  }

  public static org.example.libs.SensCanLogData parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessage
        .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
  }
  public static org.example.libs.SensCanLogData parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessage
        .parseWithIOException(PARSER, input);
  }
  public static org.example.libs.SensCanLogData parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessage
        .parseWithIOException(PARSER, input, extensionRegistry);
  }

  @java.lang.Override
  public Builder newBuilderForType() { return newBuilder(); }
  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }
  public static Builder newBuilder(org.example.libs.SensCanLogData prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }
  @java.lang.Override
  public Builder toBuilder() {
    return this == DEFAULT_INSTANCE
        ? new Builder() : new Builder().mergeFrom(this);
  }

  @java.lang.Override
  protected Builder newBuilderForType(
      com.google.protobuf.GeneratedMessage.BuilderParent parent) {
    Builder builder = new Builder(parent);
    return builder;
  }
  /**
   * <pre>
   * CAN-лог
   * </pre>
   *
   * Protobuf type {@code SensCanLogData}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessage.Builder<Builder> implements
      // @@protoc_insertion_point(builder_implements:SensCanLogData)
      org.example.libs.SensCanLogDataOrBuilder {
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return org.example.libs.StorageRecordOuterClass.internal_static_SensCanLogData_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return org.example.libs.StorageRecordOuterClass.internal_static_SensCanLogData_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              org.example.libs.SensCanLogData.class, org.example.libs.SensCanLogData.Builder.class);
    }

    // Construct using org.example.libs.SensCanLogData.newBuilder()
    private Builder() {

    }

    private Builder(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      super(parent);

    }
    @java.lang.Override
    public Builder clear() {
      super.clear();
      bitField0_ = 0;
      sensNum_ = 0;
      flagSecurityState_ = 0;
      flagAlarm_ = 0;
      engineTimeAll_ = 0;
      engineTurnSpeed_ = 0;
      engineTemperature_ = 0;
      fuelConsumptionAll_ = 0;
      fuelLevel_ = 0;
      trackAll_ = 0;
      speed_ = 0;
      pressureAxis1_ = 0;
      pressureAxis2_ = 0;
      pressureAxis3_ = 0;
      pressureAxis4_ = 0;
      pressureAxis5_ = 0;
      return this;
    }

    @java.lang.Override
    public com.google.protobuf.Descriptors.Descriptor
        getDescriptorForType() {
      return org.example.libs.StorageRecordOuterClass.internal_static_SensCanLogData_descriptor;
    }

    @java.lang.Override
    public org.example.libs.SensCanLogData getDefaultInstanceForType() {
      return org.example.libs.SensCanLogData.getDefaultInstance();
    }

    @java.lang.Override
    public org.example.libs.SensCanLogData build() {
      org.example.libs.SensCanLogData result = buildPartial();
      if (!result.isInitialized()) {
        throw newUninitializedMessageException(result);
      }
      return result;
    }

    @java.lang.Override
    public org.example.libs.SensCanLogData buildPartial() {
      org.example.libs.SensCanLogData result = new org.example.libs.SensCanLogData(this);
      if (bitField0_ != 0) { buildPartial0(result); }
      onBuilt();
      return result;
    }

    private void buildPartial0(org.example.libs.SensCanLogData result) {
      int from_bitField0_ = bitField0_;
      if (((from_bitField0_ & 0x00000001) != 0)) {
        result.sensNum_ = sensNum_;
      }
      if (((from_bitField0_ & 0x00000002) != 0)) {
        result.flagSecurityState_ = flagSecurityState_;
      }
      if (((from_bitField0_ & 0x00000004) != 0)) {
        result.flagAlarm_ = flagAlarm_;
      }
      if (((from_bitField0_ & 0x00000008) != 0)) {
        result.engineTimeAll_ = engineTimeAll_;
      }
      if (((from_bitField0_ & 0x00000010) != 0)) {
        result.engineTurnSpeed_ = engineTurnSpeed_;
      }
      if (((from_bitField0_ & 0x00000020) != 0)) {
        result.engineTemperature_ = engineTemperature_;
      }
      if (((from_bitField0_ & 0x00000040) != 0)) {
        result.fuelConsumptionAll_ = fuelConsumptionAll_;
      }
      if (((from_bitField0_ & 0x00000080) != 0)) {
        result.fuelLevel_ = fuelLevel_;
      }
      if (((from_bitField0_ & 0x00000100) != 0)) {
        result.trackAll_ = trackAll_;
      }
      if (((from_bitField0_ & 0x00000200) != 0)) {
        result.speed_ = speed_;
      }
      if (((from_bitField0_ & 0x00000400) != 0)) {
        result.pressureAxis1_ = pressureAxis1_;
      }
      if (((from_bitField0_ & 0x00000800) != 0)) {
        result.pressureAxis2_ = pressureAxis2_;
      }
      if (((from_bitField0_ & 0x00001000) != 0)) {
        result.pressureAxis3_ = pressureAxis3_;
      }
      if (((from_bitField0_ & 0x00002000) != 0)) {
        result.pressureAxis4_ = pressureAxis4_;
      }
      if (((from_bitField0_ & 0x00004000) != 0)) {
        result.pressureAxis5_ = pressureAxis5_;
      }
    }

    @java.lang.Override
    public Builder mergeFrom(com.google.protobuf.Message other) {
      if (other instanceof org.example.libs.SensCanLogData) {
        return mergeFrom((org.example.libs.SensCanLogData)other);
      } else {
        super.mergeFrom(other);
        return this;
      }
    }

    public Builder mergeFrom(org.example.libs.SensCanLogData other) {
      if (other == org.example.libs.SensCanLogData.getDefaultInstance()) return this;
      if (other.getSensNum() != 0) {
        setSensNum(other.getSensNum());
      }
      if (other.getFlagSecurityState() != 0) {
        setFlagSecurityState(other.getFlagSecurityState());
      }
      if (other.getFlagAlarm() != 0) {
        setFlagAlarm(other.getFlagAlarm());
      }
      if (other.getEngineTimeAll() != 0) {
        setEngineTimeAll(other.getEngineTimeAll());
      }
      if (other.getEngineTurnSpeed() != 0) {
        setEngineTurnSpeed(other.getEngineTurnSpeed());
      }
      if (other.getEngineTemperature() != 0) {
        setEngineTemperature(other.getEngineTemperature());
      }
      if (other.getFuelConsumptionAll() != 0) {
        setFuelConsumptionAll(other.getFuelConsumptionAll());
      }
      if (other.getFuelLevel() != 0) {
        setFuelLevel(other.getFuelLevel());
      }
      if (other.getTrackAll() != 0) {
        setTrackAll(other.getTrackAll());
      }
      if (other.getSpeed() != 0) {
        setSpeed(other.getSpeed());
      }
      if (other.getPressureAxis1() != 0) {
        setPressureAxis1(other.getPressureAxis1());
      }
      if (other.getPressureAxis2() != 0) {
        setPressureAxis2(other.getPressureAxis2());
      }
      if (other.getPressureAxis3() != 0) {
        setPressureAxis3(other.getPressureAxis3());
      }
      if (other.getPressureAxis4() != 0) {
        setPressureAxis4(other.getPressureAxis4());
      }
      if (other.getPressureAxis5() != 0) {
        setPressureAxis5(other.getPressureAxis5());
      }
      this.mergeUnknownFields(other.getUnknownFields());
      onChanged();
      return this;
    }

    @java.lang.Override
    public final boolean isInitialized() {
      return true;
    }

    @java.lang.Override
    public Builder mergeFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 8: {
              sensNum_ = input.readUInt32();
              bitField0_ |= 0x00000001;
              break;
            } // case 8
            case 16: {
              flagSecurityState_ = input.readUInt32();
              bitField0_ |= 0x00000002;
              break;
            } // case 16
            case 24: {
              flagAlarm_ = input.readUInt32();
              bitField0_ |= 0x00000004;
              break;
            } // case 24
            case 32: {
              engineTimeAll_ = input.readUInt32();
              bitField0_ |= 0x00000008;
              break;
            } // case 32
            case 40: {
              engineTurnSpeed_ = input.readUInt32();
              bitField0_ |= 0x00000010;
              break;
            } // case 40
            case 48: {
              engineTemperature_ = input.readSInt32();
              bitField0_ |= 0x00000020;
              break;
            } // case 48
            case 56: {
              fuelConsumptionAll_ = input.readUInt32();
              bitField0_ |= 0x00000040;
              break;
            } // case 56
            case 64: {
              fuelLevel_ = input.readUInt32();
              bitField0_ |= 0x00000080;
              break;
            } // case 64
            case 72: {
              trackAll_ = input.readUInt32();
              bitField0_ |= 0x00000100;
              break;
            } // case 72
            case 80: {
              speed_ = input.readUInt32();
              bitField0_ |= 0x00000200;
              break;
            } // case 80
            case 88: {
              pressureAxis1_ = input.readUInt32();
              bitField0_ |= 0x00000400;
              break;
            } // case 88
            case 96: {
              pressureAxis2_ = input.readUInt32();
              bitField0_ |= 0x00000800;
              break;
            } // case 96
            case 104: {
              pressureAxis3_ = input.readUInt32();
              bitField0_ |= 0x00001000;
              break;
            } // case 104
            case 112: {
              pressureAxis4_ = input.readUInt32();
              bitField0_ |= 0x00002000;
              break;
            } // case 112
            case 120: {
              pressureAxis5_ = input.readUInt32();
              bitField0_ |= 0x00004000;
              break;
            } // case 120
            default: {
              if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                done = true; // was an endgroup tag
              }
              break;
            } // default:
          } // switch (tag)
        } // while (!done)
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.unwrapIOException();
      } finally {
        onChanged();
      } // finally
      return this;
    }
    private int bitField0_;

    private int sensNum_ ;
    /**
     * <pre>
     * Номер датчика
     * </pre>
     *
     * <code>uint32 sens_num = 1;</code>
     * @return The sensNum.
     */
    @java.lang.Override
    public int getSensNum() {
      return sensNum_;
    }
    /**
     * <pre>
     * Номер датчика
     * </pre>
     *
     * <code>uint32 sens_num = 1;</code>
     * @param value The sensNum to set.
     * @return This builder for chaining.
     */
    public Builder setSensNum(int value) {

      sensNum_ = value;
      bitField0_ |= 0x00000001;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Номер датчика
     * </pre>
     *
     * <code>uint32 sens_num = 1;</code>
     * @return This builder for chaining.
     */
    public Builder clearSensNum() {
      bitField0_ = (bitField0_ & ~0x00000001);
      sensNum_ = 0;
      onChanged();
      return this;
    }

    private int flagSecurityState_ ;
    /**
     * <pre>
     * Флаги работоспособности и безопасности устройства
     * </pre>
     *
     * <code>uint32 flag_security_state = 2;</code>
     * @return The flagSecurityState.
     */
    @java.lang.Override
    public int getFlagSecurityState() {
      return flagSecurityState_;
    }
    /**
     * <pre>
     * Флаги работоспособности и безопасности устройства
     * </pre>
     *
     * <code>uint32 flag_security_state = 2;</code>
     * @param value The flagSecurityState to set.
     * @return This builder for chaining.
     */
    public Builder setFlagSecurityState(int value) {

      flagSecurityState_ = value;
      bitField0_ |= 0x00000002;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Флаги работоспособности и безопасности устройства
     * </pre>
     *
     * <code>uint32 flag_security_state = 2;</code>
     * @return This builder for chaining.
     */
    public Builder clearFlagSecurityState() {
      bitField0_ = (bitField0_ & ~0x00000002);
      flagSecurityState_ = 0;
      onChanged();
      return this;
    }

    private int flagAlarm_ ;
    /**
     * <pre>
     * Флаги контроллеров аварии
     * </pre>
     *
     * <code>uint32 flag_alarm = 3;</code>
     * @return The flagAlarm.
     */
    @java.lang.Override
    public int getFlagAlarm() {
      return flagAlarm_;
    }
    /**
     * <pre>
     * Флаги контроллеров аварии
     * </pre>
     *
     * <code>uint32 flag_alarm = 3;</code>
     * @param value The flagAlarm to set.
     * @return This builder for chaining.
     */
    public Builder setFlagAlarm(int value) {

      flagAlarm_ = value;
      bitField0_ |= 0x00000004;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Флаги контроллеров аварии
     * </pre>
     *
     * <code>uint32 flag_alarm = 3;</code>
     * @return This builder for chaining.
     */
    public Builder clearFlagAlarm() {
      bitField0_ = (bitField0_ & ~0x00000004);
      flagAlarm_ = 0;
      onChanged();
      return this;
    }

    private int engineTimeAll_ ;
    /**
     * <pre>
     * Полное время работы двигателя, ч*100. Пример: 1ч 15мин = 125.
     * </pre>
     *
     * <code>uint32 engine_time_all = 4;</code>
     * @return The engineTimeAll.
     */
    @java.lang.Override
    public int getEngineTimeAll() {
      return engineTimeAll_;
    }
    /**
     * <pre>
     * Полное время работы двигателя, ч*100. Пример: 1ч 15мин = 125.
     * </pre>
     *
     * <code>uint32 engine_time_all = 4;</code>
     * @param value The engineTimeAll to set.
     * @return This builder for chaining.
     */
    public Builder setEngineTimeAll(int value) {

      engineTimeAll_ = value;
      bitField0_ |= 0x00000008;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Полное время работы двигателя, ч*100. Пример: 1ч 15мин = 125.
     * </pre>
     *
     * <code>uint32 engine_time_all = 4;</code>
     * @return This builder for chaining.
     */
    public Builder clearEngineTimeAll() {
      bitField0_ = (bitField0_ & ~0x00000008);
      engineTimeAll_ = 0;
      onChanged();
      return this;
    }

    private int engineTurnSpeed_ ;
    /**
     * <pre>
     * Обороты двигателя
     * </pre>
     *
     * <code>uint32 engine_turn_speed = 5;</code>
     * @return The engineTurnSpeed.
     */
    @java.lang.Override
    public int getEngineTurnSpeed() {
      return engineTurnSpeed_;
    }
    /**
     * <pre>
     * Обороты двигателя
     * </pre>
     *
     * <code>uint32 engine_turn_speed = 5;</code>
     * @param value The engineTurnSpeed to set.
     * @return This builder for chaining.
     */
    public Builder setEngineTurnSpeed(int value) {

      engineTurnSpeed_ = value;
      bitField0_ |= 0x00000010;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Обороты двигателя
     * </pre>
     *
     * <code>uint32 engine_turn_speed = 5;</code>
     * @return This builder for chaining.
     */
    public Builder clearEngineTurnSpeed() {
      bitField0_ = (bitField0_ & ~0x00000010);
      engineTurnSpeed_ = 0;
      onChanged();
      return this;
    }

    private int engineTemperature_ ;
    /**
     * <pre>
     * Температура двигателя, Ц.
     * </pre>
     *
     * <code>sint32 engine_temperature = 6;</code>
     * @return The engineTemperature.
     */
    @java.lang.Override
    public int getEngineTemperature() {
      return engineTemperature_;
    }
    /**
     * <pre>
     * Температура двигателя, Ц.
     * </pre>
     *
     * <code>sint32 engine_temperature = 6;</code>
     * @param value The engineTemperature to set.
     * @return This builder for chaining.
     */
    public Builder setEngineTemperature(int value) {

      engineTemperature_ = value;
      bitField0_ |= 0x00000020;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Температура двигателя, Ц.
     * </pre>
     *
     * <code>sint32 engine_temperature = 6;</code>
     * @return This builder for chaining.
     */
    public Builder clearEngineTemperature() {
      bitField0_ = (bitField0_ & ~0x00000020);
      engineTemperature_ = 0;
      onChanged();
      return this;
    }

    private int fuelConsumptionAll_ ;
    /**
     * <pre>
     * Полный расход топлива, л.
     * </pre>
     *
     * <code>uint32 fuel_consumption_all = 7;</code>
     * @return The fuelConsumptionAll.
     */
    @java.lang.Override
    public int getFuelConsumptionAll() {
      return fuelConsumptionAll_;
    }
    /**
     * <pre>
     * Полный расход топлива, л.
     * </pre>
     *
     * <code>uint32 fuel_consumption_all = 7;</code>
     * @param value The fuelConsumptionAll to set.
     * @return This builder for chaining.
     */
    public Builder setFuelConsumptionAll(int value) {

      fuelConsumptionAll_ = value;
      bitField0_ |= 0x00000040;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Полный расход топлива, л.
     * </pre>
     *
     * <code>uint32 fuel_consumption_all = 7;</code>
     * @return This builder for chaining.
     */
    public Builder clearFuelConsumptionAll() {
      bitField0_ = (bitField0_ & ~0x00000040);
      fuelConsumptionAll_ = 0;
      onChanged();
      return this;
    }

    private int fuelLevel_ ;
    /**
     * <pre>
     * bit0..bit14 - Уровень топлива. bit15- Единицы измерения. 1 - %, 0 - л.
     * </pre>
     *
     * <code>uint32 fuel_level = 8;</code>
     * @return The fuelLevel.
     */
    @java.lang.Override
    public int getFuelLevel() {
      return fuelLevel_;
    }
    /**
     * <pre>
     * bit0..bit14 - Уровень топлива. bit15- Единицы измерения. 1 - %, 0 - л.
     * </pre>
     *
     * <code>uint32 fuel_level = 8;</code>
     * @param value The fuelLevel to set.
     * @return This builder for chaining.
     */
    public Builder setFuelLevel(int value) {

      fuelLevel_ = value;
      bitField0_ |= 0x00000080;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * bit0..bit14 - Уровень топлива. bit15- Единицы измерения. 1 - %, 0 - л.
     * </pre>
     *
     * <code>uint32 fuel_level = 8;</code>
     * @return This builder for chaining.
     */
    public Builder clearFuelLevel() {
      bitField0_ = (bitField0_ & ~0x00000080);
      fuelLevel_ = 0;
      onChanged();
      return this;
    }

    private int trackAll_ ;
    /**
     * <pre>
     * Полный пробег транспортного средства, км*100
     * </pre>
     *
     * <code>uint32 track_all = 9;</code>
     * @return The trackAll.
     */
    @java.lang.Override
    public int getTrackAll() {
      return trackAll_;
    }
    /**
     * <pre>
     * Полный пробег транспортного средства, км*100
     * </pre>
     *
     * <code>uint32 track_all = 9;</code>
     * @param value The trackAll to set.
     * @return This builder for chaining.
     */
    public Builder setTrackAll(int value) {

      trackAll_ = value;
      bitField0_ |= 0x00000100;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Полный пробег транспортного средства, км*100
     * </pre>
     *
     * <code>uint32 track_all = 9;</code>
     * @return This builder for chaining.
     */
    public Builder clearTrackAll() {
      bitField0_ = (bitField0_ & ~0x00000100);
      trackAll_ = 0;
      onChanged();
      return this;
    }

    private int speed_ ;
    /**
     * <pre>
     * Скорость, км/ч.
     * </pre>
     *
     * <code>uint32 speed = 10;</code>
     * @return The speed.
     */
    @java.lang.Override
    public int getSpeed() {
      return speed_;
    }
    /**
     * <pre>
     * Скорость, км/ч.
     * </pre>
     *
     * <code>uint32 speed = 10;</code>
     * @param value The speed to set.
     * @return This builder for chaining.
     */
    public Builder setSpeed(int value) {

      speed_ = value;
      bitField0_ |= 0x00000200;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Скорость, км/ч.
     * </pre>
     *
     * <code>uint32 speed = 10;</code>
     * @return This builder for chaining.
     */
    public Builder clearSpeed() {
      bitField0_ = (bitField0_ & ~0x00000200);
      speed_ = 0;
      onChanged();
      return this;
    }

    private int pressureAxis1_ ;
    /**
     * <pre>
     * Давление на ось 1, кг*10
     * </pre>
     *
     * <code>uint32 pressure_axis_1 = 11;</code>
     * @return The pressureAxis1.
     */
    @java.lang.Override
    public int getPressureAxis1() {
      return pressureAxis1_;
    }
    /**
     * <pre>
     * Давление на ось 1, кг*10
     * </pre>
     *
     * <code>uint32 pressure_axis_1 = 11;</code>
     * @param value The pressureAxis1 to set.
     * @return This builder for chaining.
     */
    public Builder setPressureAxis1(int value) {

      pressureAxis1_ = value;
      bitField0_ |= 0x00000400;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Давление на ось 1, кг*10
     * </pre>
     *
     * <code>uint32 pressure_axis_1 = 11;</code>
     * @return This builder for chaining.
     */
    public Builder clearPressureAxis1() {
      bitField0_ = (bitField0_ & ~0x00000400);
      pressureAxis1_ = 0;
      onChanged();
      return this;
    }

    private int pressureAxis2_ ;
    /**
     * <pre>
     * Давление на ось 2
     * </pre>
     *
     * <code>uint32 pressure_axis_2 = 12;</code>
     * @return The pressureAxis2.
     */
    @java.lang.Override
    public int getPressureAxis2() {
      return pressureAxis2_;
    }
    /**
     * <pre>
     * Давление на ось 2
     * </pre>
     *
     * <code>uint32 pressure_axis_2 = 12;</code>
     * @param value The pressureAxis2 to set.
     * @return This builder for chaining.
     */
    public Builder setPressureAxis2(int value) {

      pressureAxis2_ = value;
      bitField0_ |= 0x00000800;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Давление на ось 2
     * </pre>
     *
     * <code>uint32 pressure_axis_2 = 12;</code>
     * @return This builder for chaining.
     */
    public Builder clearPressureAxis2() {
      bitField0_ = (bitField0_ & ~0x00000800);
      pressureAxis2_ = 0;
      onChanged();
      return this;
    }

    private int pressureAxis3_ ;
    /**
     * <pre>
     * Давление на ось 3
     * </pre>
     *
     * <code>uint32 pressure_axis_3 = 13;</code>
     * @return The pressureAxis3.
     */
    @java.lang.Override
    public int getPressureAxis3() {
      return pressureAxis3_;
    }
    /**
     * <pre>
     * Давление на ось 3
     * </pre>
     *
     * <code>uint32 pressure_axis_3 = 13;</code>
     * @param value The pressureAxis3 to set.
     * @return This builder for chaining.
     */
    public Builder setPressureAxis3(int value) {

      pressureAxis3_ = value;
      bitField0_ |= 0x00001000;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Давление на ось 3
     * </pre>
     *
     * <code>uint32 pressure_axis_3 = 13;</code>
     * @return This builder for chaining.
     */
    public Builder clearPressureAxis3() {
      bitField0_ = (bitField0_ & ~0x00001000);
      pressureAxis3_ = 0;
      onChanged();
      return this;
    }

    private int pressureAxis4_ ;
    /**
     * <pre>
     * Давление на ось 4
     * </pre>
     *
     * <code>uint32 pressure_axis_4 = 14;</code>
     * @return The pressureAxis4.
     */
    @java.lang.Override
    public int getPressureAxis4() {
      return pressureAxis4_;
    }
    /**
     * <pre>
     * Давление на ось 4
     * </pre>
     *
     * <code>uint32 pressure_axis_4 = 14;</code>
     * @param value The pressureAxis4 to set.
     * @return This builder for chaining.
     */
    public Builder setPressureAxis4(int value) {

      pressureAxis4_ = value;
      bitField0_ |= 0x00002000;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Давление на ось 4
     * </pre>
     *
     * <code>uint32 pressure_axis_4 = 14;</code>
     * @return This builder for chaining.
     */
    public Builder clearPressureAxis4() {
      bitField0_ = (bitField0_ & ~0x00002000);
      pressureAxis4_ = 0;
      onChanged();
      return this;
    }

    private int pressureAxis5_ ;
    /**
     * <pre>
     * Давление на ось 5
     * </pre>
     *
     * <code>uint32 pressure_axis_5 = 15;</code>
     * @return The pressureAxis5.
     */
    @java.lang.Override
    public int getPressureAxis5() {
      return pressureAxis5_;
    }
    /**
     * <pre>
     * Давление на ось 5
     * </pre>
     *
     * <code>uint32 pressure_axis_5 = 15;</code>
     * @param value The pressureAxis5 to set.
     * @return This builder for chaining.
     */
    public Builder setPressureAxis5(int value) {

      pressureAxis5_ = value;
      bitField0_ |= 0x00004000;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Давление на ось 5
     * </pre>
     *
     * <code>uint32 pressure_axis_5 = 15;</code>
     * @return This builder for chaining.
     */
    public Builder clearPressureAxis5() {
      bitField0_ = (bitField0_ & ~0x00004000);
      pressureAxis5_ = 0;
      onChanged();
      return this;
    }

    // @@protoc_insertion_point(builder_scope:SensCanLogData)
  }

  // @@protoc_insertion_point(class_scope:SensCanLogData)
  private static final org.example.libs.SensCanLogData DEFAULT_INSTANCE;
  static {
    DEFAULT_INSTANCE = new org.example.libs.SensCanLogData();
  }

  public static org.example.libs.SensCanLogData getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static final com.google.protobuf.Parser<SensCanLogData>
      PARSER = new com.google.protobuf.AbstractParser<SensCanLogData>() {
    @java.lang.Override
    public SensCanLogData parsePartialFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      Builder builder = newBuilder();
      try {
        builder.mergeFrom(input, extensionRegistry);
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(builder.buildPartial());
      } catch (com.google.protobuf.UninitializedMessageException e) {
        throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(e)
            .setUnfinishedMessage(builder.buildPartial());
      }
      return builder.buildPartial();
    }
  };

  public static com.google.protobuf.Parser<SensCanLogData> parser() {
    return PARSER;
  }

  @java.lang.Override
  public com.google.protobuf.Parser<SensCanLogData> getParserForType() {
    return PARSER;
  }

  @java.lang.Override
  public org.example.libs.SensCanLogData getDefaultInstanceForType() {
    return DEFAULT_INSTANCE;
  }

}

